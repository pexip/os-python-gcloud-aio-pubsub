From ffebda3ba51cec9c4b846cf16d9af07f7975fb37 Mon Sep 17 00:00:00 2001
From: Will Miller <will.miller@pexip.com>
Date: Thu, 12 Sep 2024 16:38:24 +0100
Subject: [PATCH] port to aioprometheus

---
 gcloud/aio/pubsub/metrics.py |  84 ++--
 pyproject.toml               |   2 +-
 3 files changed, 503 insertions(+), 361 deletions(-)

diff --git a/gcloud/aio/pubsub/metrics.py b/gcloud/aio/pubsub/metrics.py
index 247c833..d836ad8 100644
--- a/gcloud/aio/pubsub/metrics.py
+++ b/gcloud/aio/pubsub/metrics.py
@@ -1,63 +1,93 @@
+from __future__ import annotations
+
+from contextlib import contextmanager
+from timeit import default_timer
+from typing import Any, Iterator, Self
+
 from gcloud.aio.auth import BUILD_GCLOUD_REST
 
-if BUILD_GCLOUD_REST:
+if BUILD_GCLOUD_REST:  # pylint: disable=too-complex
     pass
 else:
-    import prometheus_client
+    from aioprometheus import (  # type: ignore[attr-defined]
+        Counter as _Counter,
+        Histogram as _Histogram,
+    )
 
     _NAMESPACE = 'gcloud_aio'
     _SUBSYSTEM = 'pubsub'
 
-    BATCH_SIZE = prometheus_client.Histogram(
+    class _AioShim:
+        def __init__(self, cls: type[_Counter | _Histogram],
+                     name: str, doc: str, **kwargs: Any) -> None:
+            self._wrapped = cls(name=self._full_name(name), doc=doc, **kwargs)
+            self._labels: dict[str, str] = {}
+
+        @staticmethod
+        def _full_name(name: str, unit: str = '') -> str:
+            return '_'.join(part for part in (
+                _NAMESPACE, _SUBSYSTEM, name, unit) if part)
+
+        def labels(self, **labels: str) -> Self:
+            self._labels.update(labels)
+            return self
+
+    class Counter(_AioShim):
+        def __init__(self, name: str, doc: str, **kwargs: Any) -> None:
+            super().__init__(_Counter, name, doc, **kwargs)
+            self._wrapped: _Counter
+
+        def inc(self, value: float = 1) -> None:
+            self._wrapped.add(self._labels, value)
+
+    class Histogram(_AioShim):
+        def __init__(self, name: str, doc: str, **kwargs: Any) -> None:
+            super().__init__(_Histogram, name, doc, **kwargs)
+            self._wrapped: _Histogram
+
+        def observe(self, value: float) -> None:
+            self._wrapped.observe(self._labels, value)
+
+        @contextmanager
+        def time(self) -> Iterator[None]:
+            start = default_timer()
+            yield None
+            # Time can go backwards.
+            duration = max(default_timer() - start, 0)
+            self._wrapped.observe(self._labels, duration)
+
+    BATCH_SIZE = Histogram(
         'subscriber_batch',
         'Histogram of number of messages pulled in a single batch',
-        namespace=_NAMESPACE,
-        subsystem=_SUBSYSTEM,
-        unit='size',
         buckets=(
             0, 1, 5, 10, 25, 50, 100, 150, 250, 500, 1000, 1500, 2000,
             5000, float('inf'),
         ),
     )
 
-    CONSUME = prometheus_client.Counter(
+    CONSUME = Counter(
         'subscriber_consume',
         'Counter of the outcomes of PubSub message consume attempts',
-        ['outcome'],
-        namespace=_NAMESPACE,
-        subsystem=_SUBSYSTEM,
     )
 
-    CONSUME_LATENCY = prometheus_client.Histogram(
+    CONSUME_LATENCY = Histogram(
         'subscriber_consume_latency',
         'Histogram of PubSub message consume latencies',
-        ['phase'],
-        namespace=_NAMESPACE,
-        subsystem=_SUBSYSTEM,
-        unit='seconds',
         buckets=(.01, .1, .25, .5, 1.0, 2.5, 5.0, 7.5, 10.0, 20.0,
                  30.0, 60.0, 120.0, float('inf')),
     )
 
-    BATCH_STATUS = prometheus_client.Counter(
+    BATCH_STATUS = Counter(
         'subscriber_batch_status',
         'Counter for success/failure to process PubSub message batches',
-        ['component', 'outcome'],
-        namespace=_NAMESPACE,
-        subsystem=_SUBSYSTEM,
     )
 
-    MESSAGES_PROCESSED = prometheus_client.Counter(
+    MESSAGES_PROCESSED = Counter(
         'subscriber_messages_processed',
         'Counter of successfully acked/nacked messages',
-        ['component'],
-        namespace=_NAMESPACE,
-        subsystem=_SUBSYSTEM,
     )
 
-    MESSAGES_RECEIVED = prometheus_client.Counter(
+    MESSAGES_RECEIVED = Counter(
         'subscriber_messages_received',
         'Counter of messages pulled from subscription',
-        namespace=_NAMESPACE,
-        subsystem=_SUBSYSTEM,
     )
diff --git a/pyproject.toml b/pyproject.toml
index f75f6ef..40a27ec 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -20,9 +20,9 @@ classifiers = [
 ]
 
 [tool.poetry.dependencies]
+aioprometheus = ">= 22.5.0, < 23.0.0"
 python = ">= 3.8, < 4.0"
 gcloud-aio-auth = ">= 3.3.0, < 6.0.0"
-prometheus-client = ">= 0.13.1, < 1.0.0"
 
 [tool.poetry.group.dev.dependencies]
 aiohttp = "3.9.1"
